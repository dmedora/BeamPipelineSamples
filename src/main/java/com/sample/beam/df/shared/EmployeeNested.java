/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sample.beam.df.shared;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EmployeeNested extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6912416294786625615L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmployeeNested\",\"namespace\":\"com.sample.beam.df.shared\",\"fields\":[{\"name\":\"empId\",\"type\":[\"int\",\"null\"]},{\"name\":\"name\",\"type\":[\"string\",\"null\"]},{\"name\":\"dept\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EmpDept\",\"fields\":[{\"name\":\"deptno\",\"type\":[\"string\",\"null\"]},{\"name\":\"joindate\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EmployeeNested> ENCODER =
      new BinaryMessageEncoder<EmployeeNested>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EmployeeNested> DECODER =
      new BinaryMessageDecoder<EmployeeNested>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EmployeeNested> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EmployeeNested> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EmployeeNested>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EmployeeNested to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EmployeeNested from a ByteBuffer. */
  public static EmployeeNested fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Integer empId;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.util.List<com.sample.beam.df.shared.EmpDept> dept;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EmployeeNested() {}

  /**
   * All-args constructor.
   * @param empId The new value for empId
   * @param name The new value for name
   * @param dept The new value for dept
   */
  public EmployeeNested(java.lang.Integer empId, java.lang.CharSequence name, java.util.List<com.sample.beam.df.shared.EmpDept> dept) {
    this.empId = empId;
    this.name = name;
    this.dept = dept;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return empId;
    case 1: return name;
    case 2: return dept;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: empId = (java.lang.Integer)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: dept = (java.util.List<com.sample.beam.df.shared.EmpDept>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'empId' field.
   * @return The value of the 'empId' field.
   */
  public java.lang.Integer getEmpId() {
    return empId;
  }

  /**
   * Sets the value of the 'empId' field.
   * @param value the value to set.
   */
  public void setEmpId(java.lang.Integer value) {
    this.empId = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'dept' field.
   * @return The value of the 'dept' field.
   */
  public java.util.List<com.sample.beam.df.shared.EmpDept> getDept() {
    return dept;
  }

  /**
   * Sets the value of the 'dept' field.
   * @param value the value to set.
   */
  public void setDept(java.util.List<com.sample.beam.df.shared.EmpDept> value) {
    this.dept = value;
  }

  /**
   * Creates a new EmployeeNested RecordBuilder.
   * @return A new EmployeeNested RecordBuilder
   */
  public static com.sample.beam.df.shared.EmployeeNested.Builder newBuilder() {
    return new com.sample.beam.df.shared.EmployeeNested.Builder();
  }

  /**
   * Creates a new EmployeeNested RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EmployeeNested RecordBuilder
   */
  public static com.sample.beam.df.shared.EmployeeNested.Builder newBuilder(com.sample.beam.df.shared.EmployeeNested.Builder other) {
    return new com.sample.beam.df.shared.EmployeeNested.Builder(other);
  }

  /**
   * Creates a new EmployeeNested RecordBuilder by copying an existing EmployeeNested instance.
   * @param other The existing instance to copy.
   * @return A new EmployeeNested RecordBuilder
   */
  public static com.sample.beam.df.shared.EmployeeNested.Builder newBuilder(com.sample.beam.df.shared.EmployeeNested other) {
    return new com.sample.beam.df.shared.EmployeeNested.Builder(other);
  }

  /**
   * RecordBuilder for EmployeeNested instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmployeeNested>
    implements org.apache.avro.data.RecordBuilder<EmployeeNested> {

    private java.lang.Integer empId;
    private java.lang.CharSequence name;
    private java.util.List<com.sample.beam.df.shared.EmpDept> dept;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sample.beam.df.shared.EmployeeNested.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.empId)) {
        this.empId = data().deepCopy(fields()[0].schema(), other.empId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dept)) {
        this.dept = data().deepCopy(fields()[2].schema(), other.dept);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EmployeeNested instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sample.beam.df.shared.EmployeeNested other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.empId)) {
        this.empId = data().deepCopy(fields()[0].schema(), other.empId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dept)) {
        this.dept = data().deepCopy(fields()[2].schema(), other.dept);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'empId' field.
      * @return The value.
      */
    public java.lang.Integer getEmpId() {
      return empId;
    }

    /**
      * Sets the value of the 'empId' field.
      * @param value The value of 'empId'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.EmployeeNested.Builder setEmpId(java.lang.Integer value) {
      validate(fields()[0], value);
      this.empId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'empId' field has been set.
      * @return True if the 'empId' field has been set, false otherwise.
      */
    public boolean hasEmpId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'empId' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.EmployeeNested.Builder clearEmpId() {
      empId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.EmployeeNested.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.EmployeeNested.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dept' field.
      * @return The value.
      */
    public java.util.List<com.sample.beam.df.shared.EmpDept> getDept() {
      return dept;
    }

    /**
      * Sets the value of the 'dept' field.
      * @param value The value of 'dept'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.EmployeeNested.Builder setDept(java.util.List<com.sample.beam.df.shared.EmpDept> value) {
      validate(fields()[2], value);
      this.dept = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dept' field has been set.
      * @return True if the 'dept' field has been set, false otherwise.
      */
    public boolean hasDept() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dept' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.EmployeeNested.Builder clearDept() {
      dept = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EmployeeNested build() {
      try {
        EmployeeNested record = new EmployeeNested();
        record.empId = fieldSetFlags()[0] ? this.empId : (java.lang.Integer) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.dept = fieldSetFlags()[2] ? this.dept : (java.util.List<com.sample.beam.df.shared.EmpDept>) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EmployeeNested>
    WRITER$ = (org.apache.avro.io.DatumWriter<EmployeeNested>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EmployeeNested>
    READER$ = (org.apache.avro.io.DatumReader<EmployeeNested>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
