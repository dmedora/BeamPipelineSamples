/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sample.beam.df.shared;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Employee extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 912833280119114726L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Employee\",\"namespace\":\"com.sample.beam.df.shared\",\"fields\":[{\"name\":\"id\",\"type\":[\"int\",\"null\"]},{\"name\":\"bday\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"firstName\",\"type\":[\"string\",\"null\"]},{\"name\":\"lastName\",\"type\":[\"string\",\"null\"]},{\"name\":\"gender\",\"type\":[\"string\",\"null\"]},{\"name\":\"hireDate\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Employee> ENCODER =
      new BinaryMessageEncoder<Employee>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Employee> DECODER =
      new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Employee> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Employee> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Employee to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Employee from a ByteBuffer. */
  public static Employee fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Integer id;
  @Deprecated public org.joda.time.LocalDate bday;
  @Deprecated public java.lang.CharSequence firstName;
  @Deprecated public java.lang.CharSequence lastName;
  @Deprecated public java.lang.CharSequence gender;
  @Deprecated public org.joda.time.LocalDate hireDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Employee() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param bday The new value for bday
   * @param firstName The new value for firstName
   * @param lastName The new value for lastName
   * @param gender The new value for gender
   * @param hireDate The new value for hireDate
   */
  public Employee(java.lang.Integer id, org.joda.time.LocalDate bday, java.lang.CharSequence firstName, java.lang.CharSequence lastName, java.lang.CharSequence gender, org.joda.time.LocalDate hireDate) {
    this.id = id;
    this.bday = bday;
    this.firstName = firstName;
    this.lastName = lastName;
    this.gender = gender;
    this.hireDate = hireDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return bday;
    case 2: return firstName;
    case 3: return lastName;
    case 4: return gender;
    case 5: return hireDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      DATE_CONVERSION,
      null,
      null,
      null,
      DATE_CONVERSION,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: bday = (org.joda.time.LocalDate)value$; break;
    case 2: firstName = (java.lang.CharSequence)value$; break;
    case 3: lastName = (java.lang.CharSequence)value$; break;
    case 4: gender = (java.lang.CharSequence)value$; break;
    case 5: hireDate = (org.joda.time.LocalDate)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'bday' field.
   * @return The value of the 'bday' field.
   */
  public org.joda.time.LocalDate getBday() {
    return bday;
  }

  /**
   * Sets the value of the 'bday' field.
   * @param value the value to set.
   */
  public void setBday(org.joda.time.LocalDate value) {
    this.bday = value;
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return The value of the 'firstName' field.
   */
  public java.lang.CharSequence getFirstName() {
    return firstName;
  }

  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return The value of the 'lastName' field.
   */
  public java.lang.CharSequence getLastName() {
    return lastName;
  }

  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'gender' field.
   * @return The value of the 'gender' field.
   */
  public java.lang.CharSequence getGender() {
    return gender;
  }

  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(java.lang.CharSequence value) {
    this.gender = value;
  }

  /**
   * Gets the value of the 'hireDate' field.
   * @return The value of the 'hireDate' field.
   */
  public org.joda.time.LocalDate getHireDate() {
    return hireDate;
  }

  /**
   * Sets the value of the 'hireDate' field.
   * @param value the value to set.
   */
  public void setHireDate(org.joda.time.LocalDate value) {
    this.hireDate = value;
  }

  /**
   * Creates a new Employee RecordBuilder.
   * @return A new Employee RecordBuilder
   */
  public static com.sample.beam.df.shared.Employee.Builder newBuilder() {
    return new com.sample.beam.df.shared.Employee.Builder();
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Employee RecordBuilder
   */
  public static com.sample.beam.df.shared.Employee.Builder newBuilder(com.sample.beam.df.shared.Employee.Builder other) {
    return new com.sample.beam.df.shared.Employee.Builder(other);
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Employee instance.
   * @param other The existing instance to copy.
   * @return A new Employee RecordBuilder
   */
  public static com.sample.beam.df.shared.Employee.Builder newBuilder(com.sample.beam.df.shared.Employee other) {
    return new com.sample.beam.df.shared.Employee.Builder(other);
  }

  /**
   * RecordBuilder for Employee instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Employee>
    implements org.apache.avro.data.RecordBuilder<Employee> {

    private java.lang.Integer id;
    private org.joda.time.LocalDate bday;
    private java.lang.CharSequence firstName;
    private java.lang.CharSequence lastName;
    private java.lang.CharSequence gender;
    private org.joda.time.LocalDate hireDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sample.beam.df.shared.Employee.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bday)) {
        this.bday = data().deepCopy(fields()[1].schema(), other.bday);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.firstName)) {
        this.firstName = data().deepCopy(fields()[2].schema(), other.firstName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastName)) {
        this.lastName = data().deepCopy(fields()[3].schema(), other.lastName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gender)) {
        this.gender = data().deepCopy(fields()[4].schema(), other.gender);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.hireDate)) {
        this.hireDate = data().deepCopy(fields()[5].schema(), other.hireDate);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Employee instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sample.beam.df.shared.Employee other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bday)) {
        this.bday = data().deepCopy(fields()[1].schema(), other.bday);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.firstName)) {
        this.firstName = data().deepCopy(fields()[2].schema(), other.firstName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastName)) {
        this.lastName = data().deepCopy(fields()[3].schema(), other.lastName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gender)) {
        this.gender = data().deepCopy(fields()[4].schema(), other.gender);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.hireDate)) {
        this.hireDate = data().deepCopy(fields()[5].schema(), other.hireDate);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.Employee.Builder setId(java.lang.Integer value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.Employee.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bday' field.
      * @return The value.
      */
    public org.joda.time.LocalDate getBday() {
      return bday;
    }

    /**
      * Sets the value of the 'bday' field.
      * @param value The value of 'bday'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.Employee.Builder setBday(org.joda.time.LocalDate value) {
      validate(fields()[1], value);
      this.bday = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bday' field has been set.
      * @return True if the 'bday' field has been set, false otherwise.
      */
    public boolean hasBday() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bday' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.Employee.Builder clearBday() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstName' field.
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return firstName;
    }

    /**
      * Sets the value of the 'firstName' field.
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.Employee.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.firstName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'firstName' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.Employee.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return lastName;
    }

    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.Employee.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.lastName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.Employee.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'gender' field.
      * @return The value.
      */
    public java.lang.CharSequence getGender() {
      return gender;
    }

    /**
      * Sets the value of the 'gender' field.
      * @param value The value of 'gender'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.Employee.Builder setGender(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.gender = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'gender' field has been set.
      * @return True if the 'gender' field has been set, false otherwise.
      */
    public boolean hasGender() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'gender' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.Employee.Builder clearGender() {
      gender = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'hireDate' field.
      * @return The value.
      */
    public org.joda.time.LocalDate getHireDate() {
      return hireDate;
    }

    /**
      * Sets the value of the 'hireDate' field.
      * @param value The value of 'hireDate'.
      * @return This builder.
      */
    public com.sample.beam.df.shared.Employee.Builder setHireDate(org.joda.time.LocalDate value) {
      validate(fields()[5], value);
      this.hireDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'hireDate' field has been set.
      * @return True if the 'hireDate' field has been set, false otherwise.
      */
    public boolean hasHireDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'hireDate' field.
      * @return This builder.
      */
    public com.sample.beam.df.shared.Employee.Builder clearHireDate() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Employee build() {
      try {
        Employee record = new Employee();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0], record.getConversion(0));
        record.bday = fieldSetFlags()[1] ? this.bday : (org.joda.time.LocalDate) defaultValue(fields()[1], record.getConversion(1));
        record.firstName = fieldSetFlags()[2] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[2], record.getConversion(2));
        record.lastName = fieldSetFlags()[3] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[3], record.getConversion(3));
        record.gender = fieldSetFlags()[4] ? this.gender : (java.lang.CharSequence) defaultValue(fields()[4], record.getConversion(4));
        record.hireDate = fieldSetFlags()[5] ? this.hireDate : (org.joda.time.LocalDate) defaultValue(fields()[5], record.getConversion(5));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Employee>
    WRITER$ = (org.apache.avro.io.DatumWriter<Employee>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Employee>
    READER$ = (org.apache.avro.io.DatumReader<Employee>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
